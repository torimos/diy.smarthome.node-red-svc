{
  "_args": [
    [
      {
        "raw": "node-json-db@0.7.x",
        "scope": null,
        "escapedName": "node-json-db",
        "name": "node-json-db",
        "rawSpec": "0.7.x",
        "spec": ">=0.7.0 <0.8.0",
        "type": "range"
      },
      "/home/pi/.node-red/node_modules/json-db-node-red"
    ]
  ],
  "_from": "node-json-db@>=0.7.0 <0.8.0",
  "_id": "node-json-db@0.7.5",
  "_inCache": true,
  "_location": "/node-json-db",
  "_nodeVersion": "9.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/node-json-db_0.7.5_1520607394593_0.30742143930386145"
  },
  "_npmUser": {
    "name": "belphemur",
    "email": "antoineaf+npm@admincmd.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-json-db@0.7.x",
    "scope": null,
    "escapedName": "node-json-db",
    "name": "node-json-db",
    "rawSpec": "0.7.x",
    "spec": ">=0.7.0 <0.8.0",
    "type": "range"
  },
  "_requiredBy": [
    "/json-db-node-red"
  ],
  "_resolved": "https://registry.npmjs.org/node-json-db/-/node-json-db-0.7.5.tgz",
  "_shasum": "9906eb6c0df504bd667ae829550c9823ea4cce4e",
  "_shrinkwrap": null,
  "_spec": "node-json-db@0.7.x",
  "_where": "/home/pi/.node-red/node_modules/json-db-node-red",
  "author": {
    "name": "Antoine Aflalo",
    "email": "antoineaf+npm@admincmd.com"
  },
  "bugs": {
    "url": "https://github.com/Belphemur/node-json-db/issues"
  },
  "dependencies": {
    "mkdirp": "0.5.x"
  },
  "description": "Database using JSON file as storage for Node.JS",
  "devDependencies": {
    "expect.js": "0.3.x",
    "grunt": "1.x",
    "grunt-cli": "1.x",
    "grunt-contrib-jshint": "1.x",
    "grunt-simple-mocha": "0.4.x",
    "mocha": "5.x",
    "safe-regex": "~1.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-BTx8Dlhdq3s/2S5z76qobs88bmfGJ0vypzOo8Ba/15IcXoPwukV2bzBvE9nJM3InazQmkaxNUJFwFZTAexcvDA==",
    "shasum": "9906eb6c0df504bd667ae829550c9823ea4cce4e",
    "tarball": "https://registry.npmjs.org/node-json-db/-/node-json-db-0.7.5.tgz",
    "fileCount": 13,
    "unpackedSize": 51044
  },
  "gitHead": "ccdb4259f5d849725013237ae9f656c884df961a",
  "homepage": "https://github.com/Belphemur/node-json-db",
  "keywords": [
    "database",
    "json",
    "db"
  ],
  "license": "MIT",
  "main": "./JsonDB.js",
  "maintainers": [
    {
      "name": "belphemur",
      "email": "antoineaf+npm@admincmd.com"
    }
  ],
  "name": "node-json-db",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://secure.travis-ci.org/Belphemur/node-json-db.png?branch=master)](http://travis-ci.org/Belphemur/node-json-db) [![Coverage Status](https://img.shields.io/coveralls/Belphemur/node-json-db.svg)](https://coveralls.io/r/Belphemur/node-json-db?branch=master)\n\n[![NPM](https://nodei.co/npm/node-json-db.png?downloads=true&stars=true)](https://nodei.co/npm/node-json-db/)\n\n> A simple \"database\" that use JSON file for Node.JS.\n\n## Installation\nAdd `node-json-db` to your existing Node.js project.\n```bash\nnpm install node-json-db --save\n```\n## Inner Working\n\n### Data\nThe module store the data using JavaScript Object directly into a JSON file. You can easily traverse the data to reach \ndirectly the interesting property using the DataPath. The principle of DataPath is the same as XMLPath.\n\n### Example\n```javascript\n{\n    test: {\n        data1 : {\n            array : ['test','array']\n        },\n        data2 : 5\n    }\n}\n```\nIf you want to fetch the value of array, the DataPath is **/test/data1/array**\nTo reach the value of data2 : **/test/data2**\nYou can of course get also the full object **test** : **/test**\nOr even the root : **/**\n## Usage\nSee [test](https://github.com/Belphemur/node-json-db/tree/master/test) for more usage details.\n\n\n```javascript\nvar JsonDB = require('node-json-db');\n// The second argument is used to tell the DB to save after each push\n// If you put false, you'll have to call the save() method.\n// The third argument is to ask JsonDB to save the database in an human readable format. (default false)\nvar db = new JsonDB(\"myDataBase\", true, false);\n\n// Pushing the data into the database\n// With the wanted DataPath\n// By default the push will override the old value\ndb.push(\"/test1\",\"super test\");\n\n// It also create automatically the hierarchy when pushing new data for a DataPath that doesn't exists\ndb.push(\"/test2/my/test\",5);\n\n// You can also push directly objects\ndb.push(\"/test3\", {test:\"test\", json: {test:[\"test\"]}});\n\n// If you don't want to override the data but to merge them\n// The merge is recursive and work with Object and Array.\ndb.push(\"/test3\", {\n    new:\"cool\",\n    json: {\n        important : 5\n    }\n}, false);\n\n/*\nThis give you this results :\n{\n   \"test\":\"test\",\n   \"json\":{\n      \"test\":[\n         \"test\"\n      ],\n      \"important\":5\n   },\n   \"new\":\"cool\"\n}\n*/\n\n// You can't merge primitive.\n// If you do this:\ndb.push(\"/test2/my/test/\",10,false);\n\n// The data will be overriden\n\n// Get the data from the root\nvar data = db.getData(\"/\");\n\n// From a particular DataPath\nvar data = db.getData(\"/test1\");\n\n// If you try to get some data from a DataPath that doesn't exists\n// You'll get an Error\ntry {\n    var data = db.getData(\"/test1/test/dont/work\");\n} catch(error) {\n    // The error will tell you where the DataPath stopped. In this case test1\n    // Since /test1/test does't exist.\n    console.error(error);\n};\n\n// Deleting data\ndb.delete(\"/test1\");\n\n// Save the data (useful if you disable the saveOnPush)\ndb.save();\n\n// In case you have a exterior change to the databse file and want to reload it\n// use this method\ndb.reload();\n\n```\n\n### Array Support\nYou can also access the information stored into arrays and manipulate them.\n```javascript\nvar JsonDB = require('node-json-db');\n// The second argument is used to tell the DB to save after each push\n// If you put false, you'll have to call the save() method.\n// The third argument is to ask JsonDB to save the database in an human readable format. (default false)\nvar db = new JsonDB(\"myDataBase\", true, false);\n\n// This will create an array 'myarray' with the object '{obj:'test'}' at index 0\ndb.push(\"/arraytest/myarray[0]\", {\n    obj:'test'\n}, true);\n\n// You can retrieve a property of an object included in an array\n// testString = 'test';\nvar testString = db.getData(\"/arraytest/myarray[0]/obj\");\n\n// Doing this will delete the object stored at the index 0 of the array.\n// Keep in mind this won't delete the array even if it's empty.\ndb.delete((\"/arraytest/myarray[0]\");\n```\n\n#### Appending in Array\n```javascript\n// You can also easily append new item to an existing array\n// This set the next index with {obj: 'test'}\ndb.push(\"/arraytest/myarray[]\", {\n    obj:'test'\n}, true);\n\n\n// The append feature can be used in conjuction with properties\n// This will set the next index as an object {myTest: 'test'}\ndb.push(\"/arraytest/myarray[]/myTest\", 'test', true);\n```\n\n#### Last Item in Array\n```javascript\n// Add basic array\ndb.push(\"/arraytest/lastItemArray\", [1, 2, 3], true);\n\n// You can easily get the last item of the array with the index -1\n// This will return 3\ndb.getData(\"/arraytest/lastItemArray[-1]\");\n\n\n// You can delete the last item of an array with -1\n// This will remove the integer \"3\" from the array\ndb.delete(\"/arraytest/lastItemArray[-1]\");\n\n// This will return 2 since 3 just got removed\ndb.getData(\"/arraytest/lastItemArray[-1]\");\n```\n### Exception/Error\n#### Type\n\n| Type          |                   Explanation                                    |\n| ------------- |:----------------------------------------------------------------:|\n| DataError     | When the error is linked to the Data Given                       | \n| DatabaseError | Linked to a problem with the loading or saving of the Database.  |\n\n#### Errors\n\n| Error                                                 | Type          |                   Explanation                                                                                                                                             |\n| ------------------------------------------------------|:-------------:|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|The Data Path can't be empty                           |DataError      |The Database expect to minimum receive the root **/** as DataPath.                                                                                                         | \n|Can't find dataPath: /XXX. Stopped at YYY              |DataError      |When the full hierarchy of the DataPath given is not present in the Database. It tells you until where it's valid. This error can happen when using *getData* and *delete* | \n|Can't merge another type of data with an Array         |DataError      |If you chose to not override the data (merging) when pushing and the new data is an array but the current data isn't an array (an Object by example).                      | \n|Can't merge an Array with an Object                    |DataError      |Same idea as the previous message. You have an array as current data and ask to merge it with an Object.                                                                   | \n|DataPath: /XXX.  YYY is not an array.                  |DataError      |When trying to access an object as an array.                                                                                                                               | \n|DataPath: /XXX. Can't find index INDEX in array YYY    |DataError      |When trying to access a non-existent index in the array.                                                                                                                   | \n|Only numerical values accepted for array index         |DataError      |An array can only use number for its indexes. For this use the normal object.                                                                                                            |\n|Can't Load Database:  XXXX                             |DatabaseError  |JsonDB can't load the database for \"err\" reason. You can find the nested error in **error.inner**                                                                          |\n|Can't save the database: XXX                           |DatabaseError  |JsonDB can't save the database for \"err\" reason. You can find the nested error in **error.inner**                                                                          | \n|DataBase not loaded. Can't write                       |DatabaseError  |Since the database hasn't been loaded correctly, the module won't let you save the data to avoid erasing your database.                                                    | \n\n# Thanks\n\n[James Davis](https://github.com/davisjam) for helping to fix a regular expression vulnerable to [catastrophic backtracking](https://docs.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/Belphemur/node-json-db.git"
  },
  "scripts": {
    "test": "mocha test/test_*.js"
  },
  "version": "0.7.5"
}
